<?xml version="1.0" encoding="utf-8"?><rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:openSearch="http://a9.com/-/spec/opensearchrss/1.0/" xmlns:georss="http://www.georss.org/georss" xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0" version="2.0"><channel><atom:id>tag:blogger.com,1999:blog-8838045244761204892</atom:id><lastBuildDate>Thu, 10 May 2012 04:26:08 +0000</lastBuildDate><category>design</category><category>version control</category><category>powershell</category><category>presentations</category><category>humor</category><title>Meckley's Musings</title><description></description><link>http://jasonmeckley.blogspot.com/</link><managingEditor>noreply@blogger.com (Jason Meckley)</managingEditor><generator>Blogger</generator><openSearch:totalResults>16</openSearch:totalResults><openSearch:startIndex>1</openSearch:startIndex><openSearch:itemsPerPage>25</openSearch:itemsPerPage><item><guid isPermaLink="false">tag:blogger.com,1999:blog-8838045244761204892.post-7859699025937440527</guid><pubDate>Wed, 21 Mar 2012 12:15:00 +0000</pubDate><atom:updated>2012-03-21T05:15:34.533-07:00</atom:updated><category domain="http://www.blogger.com/atom/ns#">presentations</category><category domain="http://www.blogger.com/atom/ns#">design</category><title>Harrisburg .Net User Group Presentation</title><description>&lt;p&gt;Thank you to all who attended my presentation last night. I had a great time and hope you did too. As promised, I posted my presentation and coding samples. It’s hosted on github and you can access it &lt;a href="https://github.com/jmeckley/Intro-to-design-patterns-presentation" target="_blank"&gt;here&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;I also want to thank all of you who provided feedback. This is invaluable and I love reading them. Especially when they provide honest critiques. If you have any questions about the content, please ping me.&lt;/p&gt;  &lt;div class="blogger-post-footer"&gt;&lt;img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/8838045244761204892-7859699025937440527?l=jasonmeckley.blogspot.com' alt='' /&gt;&lt;/div&gt;</description><link>http://jasonmeckley.blogspot.com/2012/03/harrisburg-net-user-group-presentation.html</link><author>noreply@blogger.com (Jason Meckley)</author><thr:total>0</thr:total></item><item><guid isPermaLink="false">tag:blogger.com,1999:blog-8838045244761204892.post-3824876661520477196</guid><pubDate>Sat, 03 Mar 2012 17:18:00 +0000</pubDate><atom:updated>2012-03-03T09:18:22.084-08:00</atom:updated><category domain="http://www.blogger.com/atom/ns#">design</category><title>Properly Handling Exceptions</title><description>&lt;p&gt;In my &lt;a href="http://jasonmeckley.blogspot.com/2012/03/exceptions-are-truly-exceptional.html" target="_blank"&gt;last post&lt;/a&gt; I discussed how exceptions should be treated as exceptional and not used to control work flow. Now lets take a look at how we can manage exceptions to provide a positive user experience without sacrificing the intent of the code.&lt;/p&gt; &lt;p&gt;To start lets review the general guidelines to exception management:&lt;/p&gt; &lt;ol&gt; &lt;li&gt;Only catch exceptions you expect to occur.&lt;/li&gt; &lt;li&gt;Only catch exceptions if you are prepared to handle them&lt;/li&gt; &lt;li&gt;Keep exception management simple. You don’t want exception handling throwing exceptions, or then you loose all information about what really happened in the first place.&lt;/li&gt; &lt;li&gt;Properly clean up your components in the event of an exception&lt;/li&gt;&lt;/ol&gt; &lt;p&gt;With these simple rules how could we clean up our existing code?&lt;/p&gt; &lt;p&gt;&lt;font face="Courier New"&gt;public class Service&lt;br&gt;{&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; public IEnumerable&amp;lt;Entity&amp;gt; GetEntities()&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; {&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; try&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; {&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; var entities = repository.GetEntities("select * from table …");&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; return entities;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; catch (Exception e)&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; {&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Logger.Log(e);&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; return new Entity[0];&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;br&gt;}&lt;/font&gt; &lt;p&gt;To start we can catch an explicit exception, for example SqlException. We could then wrap the exception with a custom type and provide the specific SQL statement that caused the error. finally we can throw the new exception allowing the exception to bubble up the call stack. it would look something like this &lt;p&gt;&lt;font face="Courier New"&gt;public class Service&lt;br&gt;{&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; public IEnumerable&amp;lt;Entity&amp;gt; GetEntities()&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; {&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; string sql = "select * from table …";&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; try&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; {&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; var entities = repository.GetEntities(sql);&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; return entities;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; catch (SqlException e)&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; {&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; var wrapped = new ExtendedException(sql, e);&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; throw wrapped;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;br&gt;}&lt;/font&gt;&lt;/p&gt; &lt;p&gt;Do you see the changes?&lt;/p&gt; &lt;ol&gt; &lt;li&gt;We are only handling SqlExceptions.&lt;/li&gt; &lt;li&gt;We handle the exception by wrapping it in a custom exception we defined and adding the SQL statement to the message. &lt;/li&gt; &lt;li&gt;We then throw the new exception allowing it to bubble up the call stack. &lt;/li&gt;&lt;/ol&gt; &lt;p&gt;We now have better control of what will happened next. For example our UI code can now distinguish between existing items, no existing items and an exception occurring. A controller action might look like this&lt;/p&gt; &lt;p&gt;&lt;font face="Courier New"&gt;public ActionResult Index()&lt;br&gt;{&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; var results = new Service().GetModels();&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; if(results.Any())&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; {&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; return View(results);&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; return RedirectToAction("AddNew");&lt;br&gt;}&lt;/font&gt;&lt;/p&gt; &lt;p&gt;Exception handling can be placed in a global action filter that logs the error and redirects the user to an “error occurred” page.&lt;/p&gt; &lt;p&gt;Something we didn’t cover in this example was cleaning up components. This example does require it, but lets take a look at another example which cleans up after itself in the event of an exception.&lt;/p&gt; &lt;p&gt;&lt;font face="Courier New"&gt;public IEnumerable&amp;lt;Entity&amp;gt; GetEntities(string sql)&lt;br&gt;{&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; IDbCommand command = null;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; IDataReader reader = null;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; try&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; {&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; command = connection.CreateCommand();&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; command.CommandText = sql;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; reader = command.ExecuteReader();&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; while(reader.Read())&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; {&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; yield return reader.ToEntity();&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; finally&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; {&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; if (reader != null)&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; {&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; reader.Dispose();&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; if(command != null)&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; {&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; command.Dispose();&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;br&gt;}&lt;/font&gt;&lt;/p&gt; &lt;p&gt;Here we are disposing of our command and reader components within the finally block. Notice that we don’t have a catch statement, it’s not needed. Granted we could move the ExtendedSqlException into this block, but I wanted to stick with our original code sample.&lt;/p&gt; &lt;p&gt;One last thing to note. The .Net framework contains the keywork &lt;em&gt;using&lt;/em&gt; which allows us to write more expressive code when disposing of components. we can rewrite the above block as&lt;/p&gt; &lt;p&gt;&lt;font face="Courier New"&gt;public IEnumerable&amp;lt;Entity&amp;gt; GetEntities(string sql)&lt;br&gt;{&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; using (var command = connection.CreateCommand())&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; {&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; command.CommandText = sql;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; using (var reader = command.ExecuteReader())&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; {&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; while (reader.Read())&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; {&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; yield return reader.ToEntity();&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;br&gt;}&lt;/font&gt;&lt;/p&gt; &lt;p&gt;Which is the exact same thing as our previous block, but the code is much more expressive and easier to read.&lt;/p&gt;  &lt;div class="blogger-post-footer"&gt;&lt;img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/8838045244761204892-3824876661520477196?l=jasonmeckley.blogspot.com' alt='' /&gt;&lt;/div&gt;</description><link>http://jasonmeckley.blogspot.com/2012/03/properly-handling-exceptions.html</link><author>noreply@blogger.com (Jason Meckley)</author><thr:total>0</thr:total></item><item><guid isPermaLink="false">tag:blogger.com,1999:blog-8838045244761204892.post-3673952755787208737</guid><pubDate>Sat, 03 Mar 2012 16:35:00 +0000</pubDate><atom:updated>2012-03-03T08:35:25.934-08:00</atom:updated><category domain="http://www.blogger.com/atom/ns#">design</category><title>Exceptions are Truly Exceptional</title><description>&lt;p&gt;Exceptions are meant to break way from the current workflow and inform the user that some unexpected happened. It is not meant to control the workflow the system. Too often I have seen code like this:&lt;/p&gt; &lt;p&gt;&lt;font face="Courier New"&gt;public class Service&lt;br&gt;{&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; public IEnumerable&amp;lt;Entity&amp;gt; GetEntities()&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; {&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; try&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; {&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; var entities = repository.GetEntities("select * from table …");&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; return entities;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; catch (Exception e)&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; {&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Logger.Log(e);&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; return new Entity[0];&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;br&gt;}&lt;/font&gt;&lt;/p&gt; &lt;p&gt;The problem is there is no difference between the repository simply not containing any entities and something going horribly wrong in the lower components. Handling the scenario were no entities are present in the repository is completely different than getting a SQL exception, or any exception for that matter.&lt;/p&gt; &lt;p&gt;In other words, if the database returns no entities, I may want to redirect the user to “add new” screen rather than display an a listing of not entities. However, if an exception was thrown I may want to inform the user something unexpected occurred, that the system administrators have been notified and they should log off of the system, until further notice.&lt;/p&gt; &lt;p&gt;However I cannot do that in this scenario because the calling code cannot distinguish between no entities and fatal operations.&lt;/p&gt; &lt;p&gt;This also means the developer must understand the result have potentially 2 meanings. 1. No data is present and 2. an exception may have occurred.&lt;/p&gt; &lt;p&gt;So how can we improve upon this code so we can return the expected results and still provide a positive user experience within the application itself? That will be the context for my next post.&lt;/p&gt;  &lt;div class="blogger-post-footer"&gt;&lt;img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/8838045244761204892-3673952755787208737?l=jasonmeckley.blogspot.com' alt='' /&gt;&lt;/div&gt;</description><link>http://jasonmeckley.blogspot.com/2012/03/exceptions-are-truly-exceptional.html</link><author>noreply@blogger.com (Jason Meckley)</author><thr:total>0</thr:total></item><item><guid isPermaLink="false">tag:blogger.com,1999:blog-8838045244761204892.post-4283820959873624888</guid><pubDate>Thu, 09 Feb 2012 00:31:00 +0000</pubDate><atom:updated>2012-02-08T16:54:27.086-08:00</atom:updated><title>Oddities of the Browser</title><description>&lt;p&gt;There are many documented (and undocumented) nuances between browsers and how they process a request. Today I came across one that had me stumped for the better part of the day.&lt;/p&gt; &lt;p&gt;I have a bit of jquery that looks like this: &lt;/p&gt; &lt;p&gt;&lt;font face="Courier New"&gt;$.get(this.href, function (result) {&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; $(result).dialog();&lt;br&gt;});&lt;/font&gt;&lt;/p&gt; &lt;p&gt;with the assumption that result returns a single DOM element, typically a form element. This was working well until the following result occurred&lt;/p&gt; &lt;p&gt;&lt;font face="Courier New"&gt;&amp;lt;form&amp;gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;script type=”text/javascript”&amp;gt;/*code goes here*/&amp;lt;/script&amp;gt;&lt;br&gt;&amp;lt;/form&amp;gt;&lt;/font&gt;&lt;/p&gt; &lt;p&gt;in this scenario the result was in the correct format, but the browser interprets this as&lt;/p&gt; &lt;p&gt;&lt;font face="Courier New"&gt;&amp;lt;form&amp;gt;&amp;lt;/form&amp;gt;&lt;br&gt;&amp;lt;script type=”text/javascript”&amp;gt;/*code goes here*/&amp;lt;/script&amp;gt;&lt;/font&gt;&lt;/p&gt; &lt;p&gt;This result will produce to dialog boxes. The one you expect and a second one where you only see a title bar. The second dialog has no content, but scripts don’t have a visual representation. I account for this anomaly I had to munge with the jquery script.&lt;/p&gt; &lt;p&gt;&lt;font face="Courier New"&gt;$.get(this.href, function (result) {&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; $(result).first().dialog().append($(result).last());&lt;br&gt;});&lt;/font&gt;&lt;/p&gt; &lt;p&gt;Hopefully this will all become a mute point later on. I would like to implement client side templating and keep server calls to json response, but we are not there yet.&lt;/p&gt;  &lt;div class="blogger-post-footer"&gt;&lt;img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/8838045244761204892-4283820959873624888?l=jasonmeckley.blogspot.com' alt='' /&gt;&lt;/div&gt;</description><link>http://jasonmeckley.blogspot.com/2012/02/oddities-of-browser.html</link><author>noreply@blogger.com (Jason Meckley)</author><thr:total>0</thr:total></item><item><guid isPermaLink="false">tag:blogger.com,1999:blog-8838045244761204892.post-4532208578019993290</guid><pubDate>Mon, 30 Jan 2012 15:24:00 +0000</pubDate><atom:updated>2012-01-30T07:24:14.228-08:00</atom:updated><title>New Year, New Job!</title><description>&lt;p&gt;Two weeks I parted ways with my previous employer. It wasn’t an easy decision as I had been there for 7 years and my department was tight. More family than co-workers. But it was time to move on.&lt;/p&gt; &lt;p&gt;After a 2 week hiatus I’m now part of the Solutions Practice at CEI America as an Associate Architect! Lots of changes with this move. To start I’m working for an IT company. Typically I have worked for non-technical entities within the IT department. Another big change is working with a team of developers! This is by far my favorite aspect of the new job. A majority of my career has been of a lone developer. Not any more. I have a team of talent to help and challenge me, and vice versa. And finally, the biggest change: ditching the commute in favor of a home office! Well it wasn’t really a choice, I wasn’t looking to relocate across the state, but it’s what made this possible.&lt;/p&gt; &lt;p&gt;My blog will continue to be my own with no direct ties to my new employer. I may also start blogging about other topics too, not just techie-geek-speak.&lt;/p&gt;  &lt;div class="blogger-post-footer"&gt;&lt;img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/8838045244761204892-4532208578019993290?l=jasonmeckley.blogspot.com' alt='' /&gt;&lt;/div&gt;</description><link>http://jasonmeckley.blogspot.com/2012/01/new-year-new-job.html</link><author>noreply@blogger.com (Jason Meckley)</author><thr:total>1</thr:total></item><item><guid isPermaLink="false">tag:blogger.com,1999:blog-8838045244761204892.post-8385466948384816529</guid><pubDate>Tue, 10 Jan 2012 16:06:00 +0000</pubDate><atom:updated>2012-01-10T08:06:40.493-08:00</atom:updated><category domain="http://www.blogger.com/atom/ns#">humor</category><title></title><description>&lt;h3 class="post-title entry-title"&gt; Duty Calls! &lt;/h3&gt;Today I came across the following comic strip and busted out laughing. Thought I would share it with you.&lt;br /&gt;&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://imgs.xkcd.com/comics/duty_calls.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="320" src="http://imgs.xkcd.com/comics/duty_calls.png" width="290" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&amp;nbsp;Taken from xkcd: &lt;a href="http://xkcd.com/386/"&gt;http://xkcd.com/386/&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;div class="blogger-post-footer"&gt;&lt;img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/8838045244761204892-8385466948384816529?l=jasonmeckley.blogspot.com' alt='' /&gt;&lt;/div&gt;</description><link>http://jasonmeckley.blogspot.com/2012/01/duty-calls-today-i-came-across.html</link><author>noreply@blogger.com (Jason Meckley)</author><thr:total>0</thr:total></item><item><guid isPermaLink="false">tag:blogger.com,1999:blog-8838045244761204892.post-2757235477413559379</guid><pubDate>Thu, 05 Jan 2012 01:53:00 +0000</pubDate><atom:updated>2012-01-10T08:07:00.598-08:00</atom:updated><category domain="http://www.blogger.com/atom/ns#">design</category><title>My thoughts on Boiler Plate code</title><description>During the same conversation about how I structure code the topic of “what boiler plate(s) do you recommend?”.&lt;br /&gt;My answer: &lt;i&gt;none!&lt;/i&gt;&lt;br /&gt;You may be asking why. This comes back to the idea of vertical, context specific, slices. Any boiler plate code would be covered by the infrastructure MVC/P, data access, logging, etc. And these frameworks are really boiler plate as they are implementing compound design patterns.&lt;br /&gt;And if there is some form of boiler plate code that emerges from the vertical slices encapsulate it into it’s own object and inject the component into the calling code. Favor composition over inheritance. It pays off every time.&lt;div class="blogger-post-footer"&gt;&lt;img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/8838045244761204892-2757235477413559379?l=jasonmeckley.blogspot.com' alt='' /&gt;&lt;/div&gt;</description><link>http://jasonmeckley.blogspot.com/2012/01/my-thoughts-on-boiler-plate-code.html</link><author>noreply@blogger.com (Jason Meckley)</author><thr:total>0</thr:total></item><item><guid isPermaLink="false">tag:blogger.com,1999:blog-8838045244761204892.post-1836540706344354527</guid><pubDate>Thu, 05 Jan 2012 01:44:00 +0000</pubDate><atom:updated>2012-01-10T08:07:06.748-08:00</atom:updated><category domain="http://www.blogger.com/atom/ns#">design</category><title>Architectural Design</title><description>I was asked recently “how do you go about designing an application”? Let’s assume we know the problem domain and what the application needs to do. The next step is how we go about solving the problem.&lt;br /&gt;Traditionally you have stacked “layers”&lt;br /&gt;&lt;a href="http://lh3.ggpht.com/-CmOR-QWuu4M/TwUAZCGdJgI/AAAAAAAAAF0/3WVQ26GRe8o/s1600-h/traditional%252520ntier%25255B2%25255D.gif"&gt;&lt;img alt="traditional ntier" border="0" height="244" src="http://lh5.ggpht.com/-S8qOibC9HaE/TwUAZd1iR2I/AAAAAAAAAF8/l8bdGapR-vk/traditional%252520ntier_thumb.gif?imgmax=800" style="background-image: none; border-bottom-width: 0px; border-left-width: 0px; border-right-width: 0px; border-top-width: 0px; display: inline; padding-left: 0px; padding-right: 0px; padding-top: 0px;" title="traditional ntier" width="222" /&gt;&lt;/a&gt;&lt;br /&gt;The problem here is that you must assume one builds on top of the other and that all functionality must fall into a specific layer. You typically end up with Façade classes ending up as God classes. Anything that could ever be done to a user goes in the UserFacade class. Orders =&amp;gt; OrderFacade… you get the idea. I find this happens because it lines up nice with the picture of n-tier you are imagining in your head.&lt;br /&gt;Instead I like to think in vertical slices where each feature is a slice. Think of a slice as a specific context in which the user accesses the system. Search is a very common feature, so is placing an order. These features will most likely consist of components touching all the “layers” of n-tier, but they are only used in one specific context. (sorry can’t find an image to demonstrate what I’m writing.)&lt;br /&gt;How does this impact the code. When designing by the slice you end up with many small context specific objects all designed to do one specific task. So you have many objects, but each object is only responsible for a small, one, aspect of the system. reading code becomes so much easier and managing the code becomes easier as well because you can keep all the components next to each other.&lt;div class="blogger-post-footer"&gt;&lt;img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/8838045244761204892-1836540706344354527?l=jasonmeckley.blogspot.com' alt='' /&gt;&lt;/div&gt;</description><link>http://jasonmeckley.blogspot.com/2012/01/architectural-design.html</link><author>noreply@blogger.com (Jason Meckley)</author><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://lh5.ggpht.com/-S8qOibC9HaE/TwUAZd1iR2I/AAAAAAAAAF8/l8bdGapR-vk/s72-c/traditional%252520ntier_thumb.gif?imgmax=800" height="72" width="72" /><thr:total>0</thr:total></item><item><guid isPermaLink="false">tag:blogger.com,1999:blog-8838045244761204892.post-2383694995735125479</guid><pubDate>Wed, 21 Dec 2011 00:41:00 +0000</pubDate><atom:updated>2012-01-10T08:07:25.998-08:00</atom:updated><category domain="http://www.blogger.com/atom/ns#">powershell</category><category domain="http://www.blogger.com/atom/ns#">version control</category><title>Up and running with PS and Git</title><description>Today’s post by &lt;a href="http://haacked.com/archive/2011/12/19/get-git-for-windows.aspx?utm_source=feedburner&amp;amp;utm_medium=feed&amp;amp;utm_campaign=Feed%3A+haacked+%28you%27ve+been+HAACKED%29&amp;amp;utm_content=Google+Feedfetcher" target="_blank"&gt;Phil Haack&lt;/a&gt; mentioned using powershell over git bash. Up until now I thought I had to use git bash to communicate with github and use git. I like the idea of using powershell. it falls in line with other windows conventions.&lt;br /&gt;So I finally got it all up and running. To start I had to edit my profile script and replaced my explicit path to git &lt;i&gt;set-alias git "c:\Program Files (x86)\Git\bin\git.exe"&lt;/i&gt; with a general path to &lt;i&gt;$env:path += ";" + (Get-Item "Env:ProgramFiles(x86)").Value + "\Git\bin"&lt;/i&gt;.&amp;nbsp; This allows access to all the executables in the git directory!&lt;br /&gt;Next I installed &lt;a href="http://psget.net/" target="_blank"&gt;PsGet&lt;/a&gt;. Which is dead simple. After that I cloned posh-git to my user folder and ran .\install.ps1. This updates my powershell profile with a link to some ps scripts by Keith.&lt;br /&gt;I finally fell like I have a command friendly command line perfect for development.&amp;nbsp;&lt;div class="blogger-post-footer"&gt;&lt;img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/8838045244761204892-2383694995735125479?l=jasonmeckley.blogspot.com' alt='' /&gt;&lt;/div&gt;</description><link>http://jasonmeckley.blogspot.com/2011/12/up-and-running-with-ps-and-git.html</link><author>noreply@blogger.com (Jason Meckley)</author><thr:total>0</thr:total></item><item><guid isPermaLink="false">tag:blogger.com,1999:blog-8838045244761204892.post-5526204560720028451</guid><pubDate>Fri, 16 Dec 2011 02:47:00 +0000</pubDate><atom:updated>2011-12-15T18:47:59.111-08:00</atom:updated><title>Taking a few steps back</title><description>&lt;p&gt;I’ve realized something over the last few nights: 1. altering/extending isn’t as easy as it seems 2. I should take my time and learn the tools I’m using.&lt;/p&gt; &lt;p&gt;Common sense really. Don’t start a new project with new technology and new practices and expect everything to magically work the first time.&lt;/p&gt; &lt;p&gt;So I decided to take a step back and work on the first piece of the puzzle. getting powershell properly configured. The key is &lt;a href="http://msdn.microsoft.com/en-us/library/windows/desktop/bb613488(v=vs.85).aspx" target="_blank"&gt;profiles&lt;/a&gt;. Once you know the term to search there is plenty of information on the topic. I happened to stumble across the term.&lt;/p&gt; &lt;p&gt;First thing to add to my user profile is git&lt;/p&gt; &lt;p&gt;set-alias git “c:\Program Files (x86)\Git\bing\git.exe”&lt;/p&gt; &lt;p&gt;Simple enough.&lt;/p&gt; &lt;p&gt;Up next is getting nuget power tools configured. I want to use this feature to manage my dependencies for projects.&lt;/p&gt;  &lt;div class="blogger-post-footer"&gt;&lt;img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/8838045244761204892-5526204560720028451?l=jasonmeckley.blogspot.com' alt='' /&gt;&lt;/div&gt;</description><link>http://jasonmeckley.blogspot.com/2011/12/taking-few-steps-back.html</link><author>noreply@blogger.com (Jason Meckley)</author><thr:total>0</thr:total></item><item><guid isPermaLink="false">tag:blogger.com,1999:blog-8838045244761204892.post-5403449322724767494</guid><pubDate>Tue, 13 Dec 2011 04:32:00 +0000</pubDate><atom:updated>2011-12-12T20:32:22.120-08:00</atom:updated><title>Update on OSS project(s)</title><description>&lt;p&gt;The Rhino.Etl enhancement to support dynamics didn’t go as smoothly as I planed. I need to back up and re-think how exactly to do this.&lt;/p&gt; &lt;p&gt;So on to project/idea #2. A RavenDb job store to Quartz. This lead to some new adventures with NuGet. it’s actually quite simple to use, however I don’t like how it dumps everything into a single directory. I like to separate the release libraries from the develop libraries, but I’m sure I can resolve that with some simple powershell scripting.&lt;/p&gt; &lt;p&gt;Now that the basics are in place I will review the AdoJobStore included with Quartz and then real development can begin. If your interested check out the repository: &lt;a href="https://github.com/jmeckley/Quartz.RavenJobStore"&gt;https://github.com/jmeckley/Quartz.RavenJobStore&lt;/a&gt;.&lt;/p&gt;  &lt;div class="blogger-post-footer"&gt;&lt;img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/8838045244761204892-5403449322724767494?l=jasonmeckley.blogspot.com' alt='' /&gt;&lt;/div&gt;</description><link>http://jasonmeckley.blogspot.com/2011/12/update-on-oss-projects.html</link><author>noreply@blogger.com (Jason Meckley)</author><thr:total>0</thr:total></item><item><guid isPermaLink="false">tag:blogger.com,1999:blog-8838045244761204892.post-6469751992966949834</guid><pubDate>Fri, 09 Dec 2011 02:20:00 +0000</pubDate><atom:updated>2012-01-10T08:07:48.756-08:00</atom:updated><category domain="http://www.blogger.com/atom/ns#">powershell</category><category domain="http://www.blogger.com/atom/ns#">version control</category><title>“Gitting” up and running… slowly</title><description>For my first &lt;b&gt;real&lt;/b&gt; project using github I decided to fork Rhino.Etl, my favorite ETL library, and try to update it a bit. To start I wanted to target 4.0. Then I wanted to replace Boo references with the DLR. I don’t use Boo scripts and wanted to remove my dependency on this assembly. I may clean up with code a bit too. There seems to be a lot of noise, but that could just be features I don’t use. Finally I still want to keep Rhino.Dsl in the mix because it is an existing feature of Rhino.Etl.&lt;br /&gt;On top of all this I am learning Git and xunit and psake and … well, there is plenty to learn. So after two evenings of battling with the command line I finally have&lt;br /&gt;&lt;ol&gt;&lt;li&gt;Rhino.Etl targeting 4.0&lt;/li&gt;&lt;li&gt;The build script running&lt;/li&gt;&lt;/ol&gt;I do have 3 failing tests which I need to look into as well, but the build script is working!&lt;br /&gt;To get to this point I first forked hibernatingrhinos/rhino-etl. I saw this hasn’t been touched in a while. I then issued a pull request from Nathan Palmer. His fork was using a newer version of psake. That caused some conflicts which I then resolved via notepad++ (ouch!).&lt;br /&gt;Then came the task of targeting the 4.0 framework. Step one: change the target framework of each project. Step two: build from VS. That was a quick win. Now the build script.&lt;br /&gt;For reasons I don’t understand msbuild was pointing to v3.5. It didn’t know what 4.0 was and kept reverting to 3.5. I tried setting the $framework_version, but it kept reverting. Finally I used brute force to resolve this and used the absolute path to v4.0 msbuild. Another step closer.&lt;br /&gt;Then came xunit. I needed to use xunit.console.clr4.exe to target the 4.0 framework. Otherwise the build would fail stating the framework was built using an earlier version.&lt;div class="blogger-post-footer"&gt;&lt;img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/8838045244761204892-6469751992966949834?l=jasonmeckley.blogspot.com' alt='' /&gt;&lt;/div&gt;</description><link>http://jasonmeckley.blogspot.com/2011/12/gitting-up-and-running-slowly.html</link><author>noreply@blogger.com (Jason Meckley)</author><thr:total>0</thr:total></item><item><guid isPermaLink="false">tag:blogger.com,1999:blog-8838045244761204892.post-8910701105995436987</guid><pubDate>Wed, 07 Dec 2011 00:57:00 +0000</pubDate><atom:updated>2011-12-06T16:57:11.484-08:00</atom:updated><title>Time to get coding</title><description>&lt;p&gt;VS 2010 Pro arrived! Time to install and begin fleshing out the ideas bouncing around in my head.&lt;/p&gt;  &lt;div class="blogger-post-footer"&gt;&lt;img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/8838045244761204892-8910701105995436987?l=jasonmeckley.blogspot.com' alt='' /&gt;&lt;/div&gt;</description><link>http://jasonmeckley.blogspot.com/2011/12/time-to-get-coding.html</link><author>noreply@blogger.com (Jason Meckley)</author><thr:total>0</thr:total></item><item><guid isPermaLink="false">tag:blogger.com,1999:blog-8838045244761204892.post-5715702916142737256</guid><pubDate>Sat, 03 Dec 2011 01:01:00 +0000</pubDate><atom:updated>2012-01-10T08:08:07.497-08:00</atom:updated><category domain="http://www.blogger.com/atom/ns#">version control</category><title>Continuing my introduction to GIT</title><description>Last I left off I had a simple remote and local repository. Tonight I had a few minutes and decided to tackle local branching and merging. The first difference I found between SVN and GIT is that with GIT I am constantly “checking out”. With SVN you branch and switch. With GIT checkout and switch are the same thing.&lt;br /&gt;Another difference I found was local merging is different as well. with SVN you merge and commit. with GIT you simply merge and the changes are committed automatically.&lt;div class="blogger-post-footer"&gt;&lt;img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/8838045244761204892-5715702916142737256?l=jasonmeckley.blogspot.com' alt='' /&gt;&lt;/div&gt;</description><link>http://jasonmeckley.blogspot.com/2011/12/continuing-my-introduction-to-git.html</link><author>noreply@blogger.com (Jason Meckley)</author><thr:total>0</thr:total></item></channel></rss>